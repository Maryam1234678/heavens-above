name: Code Review Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - master
      - develop
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

# Set permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write
  issues: write

jobs:
  # Job 1: PR Validation and Basic Checks
  pr-validation:
    name: PR Validation & Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: PR Size Labeler
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR context exists
            if (!context.payload.pull_request) {
              console.log('No pull request context available');
              return;
            }
            
            const additions = context.payload.pull_request.additions || 0;
            const deletions = context.payload.pull_request.deletions || 0;
            const changes = additions + deletions;
            
            let sizeLabel = '';
            if (changes < 10) sizeLabel = 'size/XS';
            else if (changes < 100) sizeLabel = 'size/S';
            else if (changes < 500) sizeLabel = 'size/M';
            else if (changes < 1000) sizeLabel = 'size/L';
            else sizeLabel = 'size/XL';
            
            // Remove old size labels
            const oldLabels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];
            const currentLabels = context.payload.pull_request.labels.map(l => l.name);
            
            for (const label of oldLabels) {
              if (currentLabels.includes(label) && label !== sizeLabel) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                }).catch(() => {});
              }
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });
            
            // Add warning for large PRs
            if (changes > 500) {
              const comment = ` **Large PR Warning**\n\nThis PR has ${changes} lines changed. Consider breaking it into smaller PRs for easier review.\n\n**Best practices:**\n- PRs with <100 lines get reviewed faster\n- Smaller PRs reduce bug introduction risk\n- Easier to review and test`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Check PR Title Convention
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR context exists
            if (!context.payload.pull_request) {
              console.log('No pull request context available');
              return;
            }
            
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'ci', 'perf'];
            const pattern = new RegExp(`^(${validPrefixes.join('|')})(\\(.+\\))?: .+`);
            
            if (!pattern.test(title)) {
              core.setFailed(` PR title must follow conventional commits format: "type(scope): description"\n\nValid types: ${validPrefixes.join(', ')}\n\nExample: "feat(auth): add login functionality"`);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: ` **Invalid PR Title Format**\n\nYour PR title must follow [Conventional Commits](https://www.conventionalcommits.org/) format:\n\n\`\`\`\ntype(scope): description\n\`\`\`\n\n**Valid types:** ${validPrefixes.join(', ')}\n\n**Examples:**\n- \`feat(auth): add login functionality\`\n- \`fix(api): resolve CORS issue\`\n- \`docs(readme): update installation steps\``
              });
            } else {
              console.log(' PR title follows conventional commits format');
            }

      - name: Check for Description
        uses: actions/github-script@v7
        with:
          script: |
            // Check if PR context exists
            if (!context.payload.pull_request) {
              console.log('No pull request context available');
              return;
            }
            
            const body = context.payload.pull_request.body || '';
            if (body.trim().length < 50) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: ` **Missing PR Description**\n\nPlease add a detailed description explaining:\n- What changes were made\n- Why these changes were necessary\n- How to test the changes\n- Any breaking changes or dependencies`
              });
            }

      - name: Generate PR Summary
        if: github.event.pull_request
        run: |
          echo "##  PR Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes:** +${{ github.event.pull_request.additions }} / -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Changed:** ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits:** ${{ github.event.pull_request.commits }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check for package.json
        id: check-node
        run: |
          if [ -f "package.json" ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          else
            echo "has_node=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-node.outputs.has_node == 'true'
        run: npm install

      - name: Run ESLint (if configured)
        if: steps.check-node.outputs.has_node == 'true'
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npm install -g eslint
            eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json || true
            
            if [ -f "eslint-report.json" ]; then
              echo "##  ESLint Results" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat eslint-report.json | head -50 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo " No ESLint configuration found" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: HTML/CSS/JS Validation (Static Sites)
        if: steps.check-node.outputs.has_node == 'false'
        run: |
          echo "##  Static File Quality Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for console.log statements
          if grep -r "console\.log" --include="*.js" . 2>/dev/null; then
            echo " **Warning:** Found console.log statements" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            grep -rn "console\.log" --include="*.js" . | head -10 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for TODO comments
          if grep -r "TODO\|FIXME" --include="*.js" --include="*.html" --include="*.css" . 2>/dev/null; then
            echo " **Found TODO/FIXME comments:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            grep -rn "TODO\|FIXME" --include="*.js" --include="*.html" --include="*.css" . | head -10 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Code Complexity
        run: |
          echo "##  Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count lines of code
          js_lines=$(find . -name "*.js" -not -path "*/node_modules/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          html_lines=$(find . -name "*.html" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          css_lines=$(find . -name "*.css" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          
          echo "| Language | Lines of Code |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript | $js_lines |" >> $GITHUB_STEP_SUMMARY
          echo "| HTML | $html_lines |" >> $GITHUB_STEP_SUMMARY
          echo "| CSS | $css_lines |" >> $GITHUB_STEP_SUMMARY

      - name: Upload Code Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            *.log
          if-no-files-found: ignore

  # Job 3: Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check for package.json
        id: check-node
        run: |
          if [ -f "package.json" ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          else
            echo "has_node=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-node.outputs.has_node == 'true'
        run: npm install

      - name: Run npm audit
        if: steps.check-node.outputs.has_node == 'true'
        run: |
          echo "##  Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          npm audit --json > audit-report.json 2>&1 || true
          
          if [ -f "audit-report.json" ]; then
            # Parse audit results
            vulnerabilities=$(cat audit-report.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "")
            
            if [ ! -z "$vulnerabilities" ]; then
              echo "### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "$vulnerabilities" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              
              npm audit 2>&1 | head -50 >> $GITHUB_STEP_SUMMARY || true
            else
              echo " No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        continue-on-error: true

      - name: Check for sensitive data
        run: |
          echo "##  Sensitive Data Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for potential secrets/keys
          patterns=(
            "api[_-]?key"
            "api[_-]?secret"
            "password\s*="
            "pwd\s*="
            "secret\s*="
            "token\s*="
            "private[_-]?key"
            "aws[_-]?access"
            "AKIA[0-9A-Z]{16}"
          )
          
          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -riE "$pattern" --include="*.js" --include="*.json" --include="*.env" --exclude="package-lock.json" . 2>/dev/null; then
              found_secrets=true
              echo " **Warning:** Potential secret/credential found with pattern: \`$pattern\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [ "$found_secrets" = false ]; then
            echo " No obvious secrets or credentials detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Review and remove any hardcoded credentials!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for .env files
        run: |
          if find . -name ".env" -o -name ".env.*" | grep -q .; then
            echo " **Warning:** .env files found in repository!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            find . -name ".env" -o -name ".env.*" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "These files should be in .gitignore!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-report.json
          if-no-files-found: ignore

  # Job 4: Coding Standards Check
  coding-standards:
    name: Coding Standards Enforcement
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check file naming conventions
        run: |
          echo "##  File Naming Standards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for spaces in filenames
          files_with_spaces=$(find . -type f -name "* *" -not -path "*/node_modules/*" -not -path "*/.git/*" || true)
          if [ ! -z "$files_with_spaces" ]; then
            echo " **Files with spaces found (should use kebab-case or camelCase):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$files_with_spaces" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo " No files with spaces in names" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for proper file structure
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##  Repository Structure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tree -L 2 -I 'node_modules|.git' . || ls -la >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check code formatting
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##  Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for consistent indentation
          mixed_indentation=$(find . -name "*.js" -not -path "*/node_modules/*" -exec grep -l "^	" {} \; 2>/dev/null | head -5 || true)
          if [ ! -z "$mixed_indentation" ]; then
            echo " **Mixed indentation detected (tabs vs spaces):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$mixed_indentation" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo " Consistent indentation" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for code duplication
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "##  Code Duplication Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Simple duplication check (looking for identical functions)
          js_files=$(find . -name "*.js" -not -path "*/node_modules/*" | head -10)
          if [ ! -z "$js_files" ]; then
            echo "Checked JavaScript files for duplication patterns" >> $GITHUB_STEP_SUMMARY
          else
            echo "No JavaScript files to check" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Test Coverage Check
  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check for tests
        id: check-tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-tests.outputs.has_tests == 'true'
        run: npm install

      - name: Run tests
        if: steps.check-tests.outputs.has_tests == 'true'
        run: |
          npm test 2>&1 | tee test-output.log || true
          
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat test-output.log | tail -30 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Check test coverage
        if: steps.check-tests.outputs.has_tests == 'false'
        run: |
          echo "##  No Tests Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Consider adding tests to improve code quality and catch bugs early." >> $GITHUB_STEP_SUMMARY

  # Job 6: Final Review Summary
  review-summary:
    name: Generate Review Summary
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_review')
    needs: [code-quality, security-scan, coding-standards, test-coverage]
    permissions:
      pull-requests: write
    
    steps:
      - name: Create Review Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            // Only run if this is a PR event
            if (!context.payload.pull_request) {
              console.log('Skipping summary - no PR context');
              return;
            }
            
            const codeQuality = '${{ needs.code-quality.result }}';
            const securityScan = '${{ needs.security-scan.result }}';
            const codingStandards = '${{ needs.coding-standards.result }}';
            const testCoverage = '${{ needs.test-coverage.result }}';
            
            const getEmoji = (status) => {
              if (status === 'success') return '✅';
              if (status === 'failure') return '❌';
              return '⚠️';
            };
            
            const comment = `##  Automated Code Review Summary
            
            | Check | Status | Result |
            |-------|--------|--------|
            | Code Quality | ${getEmoji(codeQuality)} | ${codeQuality} |
            | Security Scan | ${getEmoji(securityScan)} | ${securityScan} |
            | Coding Standards | ${getEmoji(codingStandards)} | ${codingStandards} |
            | Test Coverage | ${getEmoji(testCoverage)} | ${testCoverage} |
            
            ---
            
            ### 📋 Review Checklist
            
            - [ ] All automated checks have passed
            - [ ] Code has been manually reviewed
            - [ ] Tests have been added/updated
            - [ ] Documentation has been updated
            - [ ] No breaking changes or dependencies noted
            
            ### 💡 Next Steps
            
            ${codeQuality === 'success' && securityScan === 'success' ? 
              ' **Ready for manual review!** All automated checks passed.' : 
              ' **Action required:** Please address the failing checks above before requesting review.'}
            
            ---
            <sub> This is an automated review. For detailed results, check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).</sub>`;
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Automated Code Review Summary')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          script: |
            // Only run if this is a PR event
            if (!context.payload.pull_request) {
              console.log('Skipping status update - no PR context');
              return;
            }
            
            const allPassed = 
              '${{ needs.code-quality.result }}' === 'success' &&
              '${{ needs.security-scan.result }}' === 'success' &&
              '${{ needs.coding-standards.result }}' === 'success';
            
            if (allPassed) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['ready-for-review', 'automated-checks-passed']
              });
            } else {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['needs-changes', 'automated-checks-failed']
              });
            }
