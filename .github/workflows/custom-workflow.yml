name: Satellite Alert & Notification System

# Custom workflow specifically designed for Heavens Above project
# Monitors satellite data and sends alerts for upcoming visible passes

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      notification_channels:
        description: 'Notification channels (comma-separated: slack,email,issue)'
        required: false
        default: 'issue'
        type: string

jobs:
  analyze-satellite-passes:
    name: Analyze Upcoming Satellite Passes
    runs-on: ubuntu-latest
    outputs:
      has_visible_passes: ${{ steps.analysis.outputs.has_passes }}
      pass_count: ${{ steps.analysis.outputs.count }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Fetch latest satellite data
      run: node run.js
      env:
        HEAVENS_ABOVE_USERNAME: ${{ secrets.HEAVENS_ABOVE_USERNAME }}
        HEAVENS_ABOVE_PASSWORD: ${{ secrets.HEAVENS_ABOVE_PASSWORD }}
      continue-on-error: true
      
    - name: Analyze satellite passes
      id: analysis
      run: |
        cat > analyze-passes.js << 'EOFJS'
        const fs = require('fs');
        const path = require('path');
        
        // Analyze satellite pass data
        function analyzePassData() {
          const dataDir = 'public/data';
          const results = {
            visiblePasses: [],
            issPass: [],
            brightSatellites: []
          };
          
          try {
            // Check if data directory exists
            if (!fs.existsSync(dataDir)) {
              console.log('Data directory not found');
              return results;
            }
            
            // Read all JSON files in data directory
            const files = fs.readdirSync(dataDir)
              .filter(f => f.endsWith('.json'));
            
            files.forEach(file => {
              try {
                const data = JSON.parse(
                  fs.readFileSync(path.join(dataDir, file), 'utf8')
                );
                
                // Analyze for visible passes in next 24 hours
                if (Array.isArray(data)) {
                  data.forEach(pass => {
                    const passTime = new Date(pass.date || pass.time);
                    const now = new Date();
                    const hoursDiff = (passTime - now) / (1000 * 60 * 60);
                    
                    // Check for passes in next 24 hours
                    if (hoursDiff > 0 && hoursDiff < 24) {
                      if (pass.name && pass.name.includes('ISS')) {
                        results.issPass.push(pass);
                      }
                      
                      // Check for bright satellites (magnitude < -2)
                      if (pass.magnitude && parseFloat(pass.magnitude) < -2) {
                        results.brightSatellites.push(pass);
                      }
                      
                      results.visiblePasses.push(pass);
                    }
                  });
                }
              } catch (e) {
                console.error(`Error processing ${file}:`, e.message);
              }
            });
            
          } catch (error) {
            console.error('Error analyzing data:', error.message);
          }
          
          return results;
        }
        
        // Execute analysis
        const analysis = analyzePassData();
        
        // Output results
        console.log(JSON.stringify(analysis, null, 2));
        
        // Write to file for next step
        fs.writeFileSync('analysis-results.json', JSON.stringify(analysis, null, 2));
        
        // Set outputs for GitHub Actions
        const hasPasses = analysis.visiblePasses.length > 0;
        const passCount = analysis.visiblePasses.length;
        
        fs.appendFileSync(process.env.GITHUB_OUTPUT, `has_passes=${hasPasses}\n`);
        fs.appendFileSync(process.env.GITHUB_OUTPUT, `count=${passCount}\n`);
        EOFJS
        
        node analyze-passes.js
        
    - name: Generate alert report
      if: steps.analysis.outputs.has_passes == 'true'
      run: |
        cat > alert-report.md << 'EOF'
        #  Satellite Pass Alert Report
        
        **Generated:** $(date +'%Y-%m-%d %H:%M:%S UTC')
        **Visible passes in next 24 hours:** ${{ steps.analysis.outputs.count }}
        
        ## Upcoming Visible Passes
        
        EOF
        
        # Parse and format results
        if [ -f analysis-results.json ]; then
          node -e "
            const data = require('./analysis-results.json');
            
            if (data.issPass.length > 0) {
              console.log('###  International Space Station (ISS)\\n');
              data.issPass.forEach(pass => {
                console.log(\`- **Time:** \${pass.date || pass.time}\`);
                console.log(\`  **Magnitude:** \${pass.magnitude || 'N/A'}\`);
                console.log(\`  **Duration:** \${pass.duration || 'N/A'}\\n\`);
              });
            }
            
            if (data.brightSatellites.length > 0) {
              console.log('###  Bright Satellites\\n');
              data.brightSatellites.forEach(pass => {
                console.log(\`- **\${pass.name}**\`);
                console.log(\`  **Time:** \${pass.date || pass.time}\`);
                console.log(\`  **Magnitude:** \${pass.magnitude}\\n\`);
              });
            }
            
            console.log('### ðŸ“‹ All Visible Passes\\n');
            console.log(\`Total passes: \${data.visiblePasses.length}\`);
          " >> alert-report.md
        fi
        
        cat alert-report.md
        
    - name: Upload alert report
      if: steps.analysis.outputs.has_passes == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: satellite-alert-report
        path: |
          alert-report.md
          analysis-results.json

  send-notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: analyze-satellite-passes
    if: needs.analyze-satellite-passes.outputs.has_visible_passes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download alert report
      uses: actions/download-artifact@v3
      with:
        name: satellite-alert-report
        
    - name: Create GitHub Issue Alert
      if: contains(github.event.inputs.notification_channels || 'issue', 'issue')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const alertReport = fs.readFileSync('alert-report.md', 'utf8');
          
          // Check if an open alert issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'satellite-alert',
            per_page: 1
          });
          
          if (issues.length > 0) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: `##  Updated Alert\n\n${alertReport}`
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: ` Satellite Alert - ${new Date().toLocaleDateString()} - ${{ needs.analyze-satellite-passes.outputs.pass_count }} visible passes`,
              body: alertReport,
              labels: ['satellite-alert', 'automated', 'notification']
            });
          }
          
    - name: Send Slack Notification
      if: contains(github.event.inputs.notification_channels || '', 'slack')
      run: |
        # Example Slack webhook notification
        # Requires SLACK_WEBHOOK_URL secret to be configured
        
        PASS_COUNT="${{ needs.analyze-satellite-passes.outputs.pass_count }}"
        
        PAYLOAD=$(cat <<EOF
        {
          "text": " Satellite Pass Alert",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": " Upcoming Satellite Passes"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*${PASS_COUNT} visible passes* detected in the next 24 hours!\n\nCheck the details in the GitHub repository."
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Details"
                  },
                  "url": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
                }
              ]
            }
          ]
        }
        EOF
        )
        
        # Uncomment to send actual Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "$PAYLOAD" \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
        echo "Slack notification prepared (webhook not configured)"
      continue-on-error: true
      
    - name: Send Email Notification
      if: contains(github.event.inputs.notification_channels || '', 'email')
      run: |
        # Example email notification using SendGrid or similar service
        # Requires email service credentials in secrets
        
        echo "Email notification would be sent here"
        echo "Recipients: observers@example.com"
        echo "Subject: Satellite Pass Alert - ${{ needs.analyze-satellite-passes.outputs.pass_count }} passes"
      continue-on-error: true

  update-dashboard:
    name: Update Alert Dashboard
    runs-on: ubuntu-latest
    needs: [analyze-satellite-passes, send-notifications]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download alert report
      if: needs.analyze-satellite-passes.outputs.has_visible_passes == 'true'
      uses: actions/download-artifact@v3
      with:
        name: satellite-alert-report
      continue-on-error: true
        
    - name: Update dashboard
      run: |
        mkdir -p .alerts
        
        cat > .alerts/latest-status.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "has_passes": ${{ needs.analyze-satellite-passes.outputs.has_visible_passes }},
          "pass_count": ${{ needs.analyze-satellite-passes.outputs.pass_count }},
          "workflow_run": "${{ github.run_id }}",
          "notifications_sent": true
        }
        EOF
        
        # Create human-readable dashboard
        cat > .alerts/dashboard.md << 'EOF'
        #  Satellite Alert Dashboard
        
        **Last Updated:** $(date +'%Y-%m-%d %H:%M:%S UTC')
        **Status:** ${{ needs.analyze-satellite-passes.outputs.has_visible_passes == 'true' && 'âœ… Active Alerts' || 'âšª No Current Alerts' }}
        
        ## Current Status
        - **Visible Passes (24h):** ${{ needs.analyze-satellite-passes.outputs.pass_count }}
        - **Last Check:** $(date +'%Y-%m-%d %H:%M:%S UTC')
        - **Next Check:** In 6 hours
        
        ## Alert History
        View [workflow runs](../../actions/workflows/satellite-alert-system.yml) for historical data.
        
        ---
        *Automated by GitHub Actions*
        EOF
        
    - name: Commit dashboard updates
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add .alerts/
        git commit -m " Update satellite alert dashboard [skip ci]" || echo "No changes"
        git push || echo "Nothing to push"
      continue-on-error: true
      
    - name: Generate workflow summary
      run: |
        echo "##  Satellite Alert System Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Execution Time:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Visible Passes:** ${{ needs.analyze-satellite-passes.outputs.pass_count }}" >> $GITHUB_STEP_SUMMARY
        echo "**Alerts Sent:** ${{ needs.analyze-satellite-passes.outputs.has_visible_passes == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Next automated check in 6 hours" >> $GITHUB_STEP_SUMMARY
        echo "- Manual trigger available via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
