name: Dependency Updates Automation

on:
  schedule:
    # Run weekly check on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: Check for outdated dependencies
  check-dependencies:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if package.json exists
        id: check-package
        run: |
          if [ -f "package.json" ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
            echo "✅ Found package.json" >> $GITHUB_STEP_SUMMARY
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
            echo "⚠️ No package.json found - this appears to be a static HTML project" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Node.js (if package.json exists)
        if: steps.check-package.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies (if applicable)
        if: steps.check-package.outputs.has_package == 'true'
        run: npm install

      - name: Check for outdated npm dependencies
        if: steps.check-package.outputs.has_package == 'true'
        id: npm-outdated
        run: |
          echo "## 📦 NPM Dependency Update Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm outdated --json > outdated.json 2>&1 || true
          
          if [ -s outdated.json ]; then
            echo "### Outdated Dependencies Found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat outdated.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✨ All npm dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security audit (if applicable)
        if: steps.check-package.outputs.has_package == 'true'
        run: |
          echo "## 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit.json 2>&1 || true
          
          if [ -s audit.json ]; then
            echo "### Security Report:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            npm audit || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check GitHub Actions versions
        id: check-actions
        run: |
          echo "## 🔄 GitHub Actions Version Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Scanning workflow files for action versions..." >> $GITHUB_STEP_SUMMARY
          
          # Find all workflow files
          if [ -d ".github/workflows" ]; then
            for file in .github/workflows/*.yml .github/workflows/*.yaml; do
              if [ -f "$file" ]; then
                echo "### $file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
                grep -E "uses:.*@v[0-9]" "$file" || echo "No versioned actions found" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "⚠️ No .github/workflows directory found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for CDN dependencies (for static sites)
        run: |
          echo "## 🌐 CDN Dependencies Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Search for common CDN patterns in HTML/JS files
          if find . -name "*.html" -o -name "*.js" | grep -q .; then
            echo "### Found external dependencies:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            grep -rh "cdn\|unpkg\|jsdelivr\|cdnjs" . --include="*.html" --include="*.js" 2>/dev/null | head -20 || echo "No CDN dependencies found"
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload dependency reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports-${{ github.run_number }}
          path: |
            outdated.json
            audit.json
          if-no-files-found: ignore
          retention-days: 30

  # Job 2: Test Dependabot PRs (if Dependabot is configured)
  test-dependabot-updates:
    name: Test Dependency Updates
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      (github.actor == 'dependabot[bot]' || github.event.pull_request.user.login == 'dependabot[bot]')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check project type
        id: check-type
        run: |
          if [ -f "package.json" ]; then
            echo "project_type=node" >> $GITHUB_OUTPUT
          else
            echo "project_type=static" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        run: npm install

      - name: Run linting (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        run: |
          if npm run 2>&1 | grep -q "lint"; then
            npm run lint
          else
            echo "ℹ️ No lint script found"
          fi
        continue-on-error: true

      - name: Run tests (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        run: |
          if npm run 2>&1 | grep -q "test"; then
            npm test
          else
            echo "⚠️ No test script found — skipping tests"
          fi
        continue-on-error: true

      - name: Run build check (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        run: |
          if npm run 2>&1 | grep -q "build"; then
            npm run build
          else
            echo "ℹ️ No build script found"
          fi
        continue-on-error: true

      - name: Validate HTML/CSS/JS (for static projects)
        if: steps.check-type.outputs.project_type == 'static'
        run: |
          echo "## 🔍 Static File Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if HTML files are valid
          html_count=$(find . -name "*.html" | wc -l)
          css_count=$(find . -name "*.css" | wc -l)
          js_count=$(find . -name "*.js" | wc -l)
          
          echo "- HTML files: $html_count" >> $GITHUB_STEP_SUMMARY
          echo "- CSS files: $css_count" >> $GITHUB_STEP_SUMMARY
          echo "- JS files: $js_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Static files validated successfully" >> $GITHUB_STEP_SUMMARY

      - name: Check for breaking changes
        run: |
          echo "## 🔍 Dependency Update Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Updated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Files changed:** ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY

      - name: Security audit (for Node projects)
        if: steps.check-type.outputs.project_type == 'node'
        run: |
          npm audit --audit-level=moderate || echo "⚠️ Security vulnerabilities detected"
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-test-results-${{ github.run_number }}
          path: |
            coverage/
            test-results/
            *.log
          if-no-files-found: ignore
          retention-days: 14

  # Job 3: Automated Code Review
  review-dependency-updates:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      (github.actor == 'dependabot[bot]' || github.event.pull_request.user.login == 'dependabot[bot]')
    needs: test-dependabot-updates
    permissions:
      pull-requests: write
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze dependency changes
        id: analyze
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Determine update type and risk level
          if echo "$PR_TITLE" | grep -qi "major"; then
            echo "update_type=major" >> $GITHUB_OUTPUT
            echo "risk_level=high" >> $GITHUB_OUTPUT
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            COMMENT="⚠️ **Major version update detected**\n\n"
            COMMENT+="This is a major version bump which may contain breaking changes.\n"
            COMMENT+="**Action required:** Manual review and testing needed before merging.\n\n"
            COMMENT+="Please review the changelog and test thoroughly."
          elif echo "$PR_TITLE" | grep -qi "minor"; then
            echo "update_type=minor" >> $GITHUB_OUTPUT
            echo "risk_level=medium" >> $GITHUB_OUTPUT
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            COMMENT="✅ **Minor version update**\n\n"
            COMMENT+="This update includes new features but should be backward compatible.\n"
            COMMENT+="Automated tests have passed. Review recommended but not critical."
          elif echo "$PR_TITLE" | grep -qi "patch\|bump"; then
            echo "update_type=patch" >> $GITHUB_OUTPUT
            echo "risk_level=low" >> $GITHUB_OUTPUT
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            COMMENT="✅ **Patch update**\n\n"
            COMMENT+="This is a patch-level update (bug fixes only).\n"
            COMMENT+="Tests have passed. Safe to merge automatically."
          else
            echo "update_type=unknown" >> $GITHUB_OUTPUT
            echo "risk_level=medium" >> $GITHUB_OUTPUT
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            COMMENT="ℹ️ **Dependency update**\n\n"
            COMMENT+="Review the changes and ensure compatibility."
          fi
          
          # Check for security updates
          if echo "$PR_TITLE" | grep -qi "security\|vulnerability\|cve"; then
            echo "is_security=true" >> $GITHUB_OUTPUT
            COMMENT="🔒 **Security update detected!**\n\n"
            COMMENT+="This update addresses security vulnerabilities.\n"
            COMMENT+="**Priority:** HIGH - Please review and merge as soon as possible.\n\n"
          else
            echo "is_security=false" >> $GITHUB_OUTPUT
          fi
          
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v8
        with:
          script: |
            const comment = `${{ steps.analyze.outputs.comment }}
            
            ---
            **Automated Review Summary:**
            - **Update Type:** ${{ steps.analyze.outputs.update_type }}
            - **Risk Level:** ${{ steps.analyze.outputs.risk_level }}
            - **Security Update:** ${{ steps.analyze.outputs.is_security }}
            - **Auto-merge eligible:** ${{ steps.analyze.outputs.auto_merge }}
            
            <sub>🤖 Generated by Dependency Updates Automation</sub>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Label PR based on update type
        uses: actions/github-script@v8
        with:
          script: |
            const updateType = '${{ steps.analyze.outputs.update_type }}';
            const isSecurity = '${{ steps.analyze.outputs.is_security }}' === 'true';
            const riskLevel = '${{ steps.analyze.outputs.risk_level }}';
            
            let labels = ['dependencies', 'automated'];
            
            // Add type labels
            if (updateType === 'major') {
              labels.push('major-update', 'needs-review', 'breaking-change');
            } else if (updateType === 'minor') {
              labels.push('minor-update', 'enhancement');
            } else if (updateType === 'patch') {
              labels.push('patch-update', 'auto-mergeable', 'bug-fix');
            }
            
            // Add security label
            if (isSecurity) {
              labels.push('security', 'priority-high');
            }
            
            // Add risk level label
            labels.push(`risk-${riskLevel}`);
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  # Job 4: Auto-merge safe updates
  auto-merge-safe-updates:
    name: Auto-merge Safe Updates
    runs-on: ubuntu-latest
    needs: [test-dependabot-updates, review-dependency-updates]
    if: |
      github.event_name == 'pull_request' &&
      (github.actor == 'dependabot[bot]' || github.event.pull_request.user.login == 'dependabot[bot]') &&
      (contains(github.event.pull_request.title, 'patch') || 
       contains(github.event.pull_request.title, 'Bump') ||
       contains(github.event.pull_request.title, 'bump'))
    permissions:
      pull-requests: write
      contents: write
    
    steps:
      - name: Wait for status checks
        run: sleep 10

      - name: Auto-approve PR
        uses: actions/github-script@v8
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '✅ **Automated approval** for patch-level dependency update.\n\nAll checks have passed. This update is safe to merge.'
            });

      - name: Enable auto-merge
        run: gh pr merge --auto --squash "${{ github.event.pull_request.number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Merge PR (fallback)
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash',
                commit_title: `${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})`,
                commit_message: 'Automated merge of safe dependency update'
              });
              console.log('✅ PR merged successfully');
            } catch (error) {
              console.log('⚠️ Could not auto-merge:', error.message);
            }
